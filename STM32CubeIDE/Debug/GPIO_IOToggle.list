
GPIO_IOToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e24  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001f60  08001f60  00011f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800200c  0800200c  0001200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002010  08002010  00012010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  08002014  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000010  08002020  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000044  08002020  00020044  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_line   00006bb9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007002  00000000  00000000  00026bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001341  00000000  00000000  0002dbfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ad8  00000000  00000000  0002ef40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000caf2b  00000000  00000000  0002fa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a30  00000000  00000000  000fa948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001f610  00000000  00000000  000fb378  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0011a988  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b18  00000000  00000000  0011aa04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08001f48 	.word	0x08001f48

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08001f48 	.word	0x08001f48

0800017c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800017c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800017e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000180:	3304      	adds	r3, #4

08000182 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000182:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000184:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000186:	d3f9      	bcc.n	800017c <CopyDataInit>
  bx lr
 8000188:	4770      	bx	lr

0800018a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800018a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800018c:	3004      	adds	r0, #4

0800018e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800018e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000190:	d3fb      	bcc.n	800018a <FillZerobss>
  bx lr
 8000192:	4770      	bx	lr

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000198:	f000 f8fa 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800019c:	480b      	ldr	r0, [pc, #44]	; (80001cc <LoopForever+0x8>)
 800019e:	490c      	ldr	r1, [pc, #48]	; (80001d0 <LoopForever+0xc>)
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <LoopForever+0x10>)
 80001a2:	2300      	movs	r3, #0
 80001a4:	f7ff ffed 	bl	8000182 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001a8:	480b      	ldr	r0, [pc, #44]	; (80001d8 <LoopForever+0x14>)
 80001aa:	490c      	ldr	r1, [pc, #48]	; (80001dc <LoopForever+0x18>)
 80001ac:	2300      	movs	r3, #0
 80001ae:	f7ff ffee 	bl	800018e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001b2:	480b      	ldr	r0, [pc, #44]	; (80001e0 <LoopForever+0x1c>)
 80001b4:	490b      	ldr	r1, [pc, #44]	; (80001e4 <LoopForever+0x20>)
 80001b6:	2300      	movs	r3, #0
 80001b8:	f7ff ffe9 	bl	800018e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001bc:	f001 fe98 	bl	8001ef0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001c0:	f000 f82c 	bl	800021c <main>

080001c4 <LoopForever>:

LoopForever:
  b LoopForever
 80001c4:	e7fe      	b.n	80001c4 <LoopForever>
 80001c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80001cc:	20000004 	.word	0x20000004
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002014 	.word	0x08002014
  INIT_BSS _sbss, _ebss
 80001d8:	20000010 	.word	0x20000010
 80001dc:	20000044 	.word	0x20000044
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001e0:	20030000 	.word	0x20030000
 80001e4:	20030000 	.word	0x20030000

080001e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001e8:	e7fe      	b.n	80001e8 <ADC1_IRQHandler>

080001ea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ea:	b480      	push	{r7}
 80001ec:	b085      	sub	sp, #20
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4313      	orrs	r3, r2
 8000200:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4013      	ands	r3, r2
 800020c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800020e:	68fb      	ldr	r3, [r7, #12]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 f9ae 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f830 	bl	8000288 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

   /* -1- Enable GPIO Clock (to be able to program the configuration registers) */
  LED2_GPIO_CLK_ENABLE();
 8000228:	2002      	movs	r0, #2
 800022a:	f7ff ffde 	bl	80001ea <LL_AHB2_GRP1_EnableClock>
  LED1_GPIO_CLK_ENABLE();
 800022e:	2002      	movs	r0, #2
 8000230:	f7ff ffdb 	bl	80001ea <LL_AHB2_GRP1_EnableClock>

  /* -2- Configure IO in output push-pull mode to drive external LEDs */
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <main+0x64>)
 8000236:	2201      	movs	r2, #1
 8000238:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <main+0x64>)
 800023c:	2201      	movs	r2, #1
 800023e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <main+0x64>)
 8000242:	2202      	movs	r2, #2
 8000244:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = LED2_PIN;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <main+0x64>)
 8000248:	2201      	movs	r2, #1
 800024a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 800024c:	490c      	ldr	r1, [pc, #48]	; (8000280 <main+0x64>)
 800024e:	480d      	ldr	r0, [pc, #52]	; (8000284 <main+0x68>)
 8000250:	f000 fb22 	bl	8000898 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_PIN;
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <main+0x64>)
 8000256:	2220      	movs	r2, #32
 8000258:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 800025a:	4909      	ldr	r1, [pc, #36]	; (8000280 <main+0x64>)
 800025c:	4809      	ldr	r0, [pc, #36]	; (8000284 <main+0x68>)
 800025e:	f000 fb1b 	bl	8000898 <HAL_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8000262:	2101      	movs	r1, #1
 8000264:	4807      	ldr	r0, [pc, #28]	; (8000284 <main+0x68>)
 8000266:	f000 fc87 	bl	8000b78 <HAL_GPIO_TogglePin>
    /* Insert delay 100 ms */
    HAL_Delay(100);
 800026a:	2064      	movs	r0, #100	; 0x64
 800026c:	f000 fa0e 	bl	800068c <HAL_Delay>
    HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 8000270:	2120      	movs	r1, #32
 8000272:	4804      	ldr	r0, [pc, #16]	; (8000284 <main+0x68>)
 8000274:	f000 fc80 	bl	8000b78 <HAL_GPIO_TogglePin>
    /* Insert delay 100 ms */
    HAL_Delay(100);
 8000278:	2064      	movs	r0, #100	; 0x64
 800027a:	f000 fa07 	bl	800068c <HAL_Delay>
    HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 800027e:	e7f0      	b.n	8000262 <main+0x46>
 8000280:	2000002c 	.word	0x2000002c
 8000284:	48000400 	.word	0x48000400

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09a      	sub	sp, #104	; 0x68
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0320 	add.w	r3, r7, #32
 8000292:	2248      	movs	r2, #72	; 0x48
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fe4e 	bl	8001f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ae:	2320      	movs	r3, #32
 80002b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002b6:	2300      	movs	r3, #0
 80002b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ba:	2360      	movs	r3, #96	; 0x60
 80002bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002c2:	2301      	movs	r3, #1
 80002c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002ca:	2320      	movs	r3, #32
 80002cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80002ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80002da:	2304      	movs	r3, #4
 80002dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0320 	add.w	r3, r7, #32
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fffc 	bl	80012e0 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ee:	f000 f81c 	bl	800032a <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002f2:	236f      	movs	r3, #111	; 0x6f
 80002f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	2303      	movs	r3, #3
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2103      	movs	r1, #3
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fb78 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800031e:	f000 f804 	bl	800032a <Error_Handler>
  /** Initializes the peripherals clocks
  */
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000322:	bf00      	nop
 8000324:	3768      	adds	r7, #104	; 0x68
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800032e:	e7fe      	b.n	800032e <Error_Handler+0x4>

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <HardFault_Handler+0x4>

08000352 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <MemManage_Handler+0x4>

08000358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000386:	f000 f955 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <SystemInit+0xa0>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <SystemInit+0xa0>)
 800039c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003a0:	4a23      	ldr	r2, [pc, #140]	; (8000430 <SystemInit+0xa0>)
 80003a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80003aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80003ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003be:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80003c2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80003c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <SystemInit+0xa4>)
 80003d0:	4013      	ands	r3, r2
 80003d2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80003d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003e0:	f023 0305 	bic.w	r3, r3, #5
 80003e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80003e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80003f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003f4:	f023 0301 	bic.w	r3, r3, #1
 80003f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80003fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <SystemInit+0xa8>)
 8000402:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000408:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <SystemInit+0xa8>)
 800040a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800040c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800041a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800041c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00
 8000434:	faf6fefb 	.word	0xfaf6fefb
 8000438:	22041000 	.word	0x22041000

0800043c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b087      	sub	sp, #28
 8000440:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	091b      	lsrs	r3, r3, #4
 800044a:	f003 030f 	and.w	r3, r3, #15
 800044e:	4a47      	ldr	r2, [pc, #284]	; (800056c <SystemCoreClockUpdate+0x130>)
 8000450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000454:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	f003 030c 	and.w	r3, r3, #12
 8000460:	2b0c      	cmp	r3, #12
 8000462:	d867      	bhi.n	8000534 <SystemCoreClockUpdate+0xf8>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <SystemCoreClockUpdate+0x30>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	080004a1 	.word	0x080004a1
 8000470:	08000535 	.word	0x08000535
 8000474:	08000535 	.word	0x08000535
 8000478:	08000535 	.word	0x08000535
 800047c:	080004a9 	.word	0x080004a9
 8000480:	08000535 	.word	0x08000535
 8000484:	08000535 	.word	0x08000535
 8000488:	08000535 	.word	0x08000535
 800048c:	080004b1 	.word	0x080004b1
 8000490:	08000535 	.word	0x08000535
 8000494:	08000535 	.word	0x08000535
 8000498:	08000535 	.word	0x08000535
 800049c:	080004b9 	.word	0x080004b9
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80004a0:	4a33      	ldr	r2, [pc, #204]	; (8000570 <SystemCoreClockUpdate+0x134>)
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	6013      	str	r3, [r2, #0]
      break;
 80004a6:	e049      	b.n	800053c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80004a8:	4b31      	ldr	r3, [pc, #196]	; (8000570 <SystemCoreClockUpdate+0x134>)
 80004aa:	4a32      	ldr	r2, [pc, #200]	; (8000574 <SystemCoreClockUpdate+0x138>)
 80004ac:	601a      	str	r2, [r3, #0]
      break;
 80004ae:	e045      	b.n	800053c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80004b0:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <SystemCoreClockUpdate+0x134>)
 80004b2:	4a31      	ldr	r2, [pc, #196]	; (8000578 <SystemCoreClockUpdate+0x13c>)
 80004b4:	601a      	str	r2, [r3, #0]
      break;
 80004b6:	e041      	b.n	800053c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	f003 0303 	and.w	r3, r3, #3
 80004c2:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	091b      	lsrs	r3, r3, #4
 80004cc:	f003 0307 	and.w	r3, r3, #7
 80004d0:	3301      	adds	r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d105      	bne.n	80004e6 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80004da:	4a26      	ldr	r2, [pc, #152]	; (8000574 <SystemCoreClockUpdate+0x138>)
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e00d      	b.n	8000502 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d105      	bne.n	80004f8 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80004ec:	4a22      	ldr	r2, [pc, #136]	; (8000578 <SystemCoreClockUpdate+0x13c>)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	e004      	b.n	8000502 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80004f8:	693a      	ldr	r2, [r7, #16]
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000500:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	0a1b      	lsrs	r3, r3, #8
 800050a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	fb02 f303 	mul.w	r3, r2, r3
 8000514:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	0f5b      	lsrs	r3, r3, #29
 800051e:	f003 0307 	and.w	r3, r3, #7
 8000522:	3301      	adds	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000526:	697a      	ldr	r2, [r7, #20]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	fbb2 f3f3 	udiv	r3, r2, r3
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <SystemCoreClockUpdate+0x134>)
 8000530:	6013      	str	r3, [r2, #0]
      break;
 8000532:	e003      	b.n	800053c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <SystemCoreClockUpdate+0x134>)
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	6013      	str	r3, [r2, #0]
      break;
 800053a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	091b      	lsrs	r3, r3, #4
 8000544:	f003 030f 	and.w	r3, r3, #15
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <SystemCoreClockUpdate+0x140>)
 800054a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <SystemCoreClockUpdate+0x134>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <SystemCoreClockUpdate+0x134>)
 800055c:	6013      	str	r3, [r2, #0]

}
 800055e:	bf00      	nop
 8000560:	371c      	adds	r7, #28
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	08001fcc 	.word	0x08001fcc
 8000570:	20000004 	.word	0x20000004
 8000574:	00f42400 	.word	0x00f42400
 8000578:	007a1200 	.word	0x007a1200
 800057c:	08001f8c 	.word	0x08001f8c

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_Init+0x3c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <HAL_Init+0x3c>)
 8000590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000596:	2003      	movs	r0, #3
 8000598:	f000 f94c 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f80f 	bl	80005c0 <HAL_InitTick>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	e001      	b.n	80005b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005ae:	f7ff febf 	bl	8000330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	58004000 	.word	0x58004000

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <HAL_InitTick+0x6c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d024      	beq.n	800061e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005d4:	f001 fbc0 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <HAL_InitTick+0x6c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f946 	bl	800087e <HAL_SYSTICK_Config>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10f      	bne.n	8000618 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b0f      	cmp	r3, #15
 80005fc:	d809      	bhi.n	8000612 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fe:	2200      	movs	r2, #0
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	f04f 30ff 	mov.w	r0, #4294967295
 8000606:	f000 f920 	bl	800084a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <HAL_InitTick+0x70>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	e007      	b.n	8000622 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
 8000616:	e004      	b.n	8000622 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000618:	2301      	movs	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e001      	b.n	8000622 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000000c 	.word	0x2000000c
 8000630:	20000008 	.word	0x20000008

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	2000000c 	.word	0x2000000c
 8000658:	20000040 	.word	0x20000040

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000040 	.word	0x20000040

08000674 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_GetTickPrio+0x14>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008

0800068c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000694:	f7ff ffe2 	bl	800065c <HAL_GetTick>
 8000698:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a4:	d005      	beq.n	80006b2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_Delay+0x40>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80006b2:	bf00      	nop
 80006b4:	f7ff ffd2 	bl	800065c <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d8f7      	bhi.n	80006b4 <HAL_Delay+0x28>
    {
    }
  }
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000000c 	.word	0x2000000c

080006d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <__NVIC_SetPriorityGrouping+0x44>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006ec:	4013      	ands	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000702:	4a04      	ldr	r2, [pc, #16]	; (8000714 <__NVIC_SetPriorityGrouping+0x44>)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	60d3      	str	r3, [r2, #12]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <__NVIC_GetPriorityGrouping+0x18>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	f003 0307 	and.w	r3, r3, #7
}
 8000726:	4618      	mov	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
         );
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f7ff ff8e 	bl	8000734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff47 	bl	80006d0 <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000858:	f7ff ff5e 	bl	8000718 <__NVIC_GetPriorityGrouping>
 800085c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	68b9      	ldr	r1, [r7, #8]
 8000862:	6978      	ldr	r0, [r7, #20]
 8000864:	f7ff ff90 	bl	8000788 <NVIC_EncodePriority>
 8000868:	4602      	mov	r2, r0
 800086a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff5f 	bl	8000734 <__NVIC_SetPriority>
}
 8000876:	bf00      	nop
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffb2 	bl	80007f0 <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	e14c      	b.n	8000b42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 813e 	beq.w	8000b3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d00b      	beq.n	80008e0 <HAL_GPIO_Init+0x48>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d007      	beq.n	80008e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d4:	2b11      	cmp	r3, #17
 80008d6:	d003      	beq.n	80008e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b12      	cmp	r3, #18
 80008de:	d130      	bne.n	8000942 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000916:	2201      	movs	r2, #1
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4013      	ands	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	f003 0201 	and.w	r2, r3, #1
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d003      	beq.n	8000982 <HAL_GPIO_Init+0xea>
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2b12      	cmp	r3, #18
 8000980:	d123      	bne.n	80009ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	08da      	lsrs	r2, r3, #3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3208      	adds	r2, #8
 800098a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	220f      	movs	r2, #15
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	691a      	ldr	r2, [r3, #16]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f003 0307 	and.w	r3, r3, #7
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	08da      	lsrs	r2, r3, #3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3208      	adds	r2, #8
 80009c4:	6939      	ldr	r1, [r7, #16]
 80009c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0203 	and.w	r2, r3, #3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8098 	beq.w	8000b3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a0c:	4a54      	ldr	r2, [pc, #336]	; (8000b60 <HAL_GPIO_Init+0x2c8>)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	3302      	adds	r3, #2
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220f      	movs	r2, #15
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a36:	d019      	beq.n	8000a6c <HAL_GPIO_Init+0x1d4>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <HAL_GPIO_Init+0x2cc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d013      	beq.n	8000a68 <HAL_GPIO_Init+0x1d0>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1cc>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a48      	ldr	r2, [pc, #288]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1c8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a47      	ldr	r2, [pc, #284]	; (8000b70 <HAL_GPIO_Init+0x2d8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1c4>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	e008      	b.n	8000a6e <HAL_GPIO_Init+0x1d6>
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	e006      	b.n	8000a6e <HAL_GPIO_Init+0x1d6>
 8000a60:	2303      	movs	r3, #3
 8000a62:	e004      	b.n	8000a6e <HAL_GPIO_Init+0x1d6>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x1d6>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <HAL_GPIO_Init+0x1d6>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	f002 0203 	and.w	r2, r2, #3
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	4093      	lsls	r3, r2
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a7e:	4938      	ldr	r1, [pc, #224]	; (8000b60 <HAL_GPIO_Init+0x2c8>)
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	3302      	adds	r3, #2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a8c:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ab2:	4a30      	ldr	r2, [pc, #192]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ae0:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f47f aeab 	bne.w	80008a8 <HAL_GPIO_Init+0x10>
  }
}
 8000b52:	bf00      	nop
 8000b54:	371c      	adds	r7, #28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40010000 	.word	0x40010000
 8000b64:	48000400 	.word	0x48000400
 8000b68:	48000800 	.word	0x48000800
 8000b6c:	48000c00 	.word	0x48000c00
 8000b70:	48001000 	.word	0x48001000
 8000b74:	58000800 	.word	0x58000800

08000b78 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	041a      	lsls	r2, r3, #16
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43d9      	mvns	r1, r3
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	400b      	ands	r3, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	619a      	str	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	58000400 	.word	0x58000400

08000bcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	58000400 	.word	0x58000400

08000be8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bfa:	d101      	bne.n	8000c00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c96:	d101      	bne.n	8000c9c <LL_RCC_HSE_IsReady+0x18>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e000      	b.n	8000c9e <LL_RCC_HSE_IsReady+0x1a>
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf6:	d101      	bne.n	8000cfc <LL_RCC_HSI_IsReady+0x18>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <LL_RCC_HSI_IsReady+0x1a>
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	061b      	lsls	r3, r3, #24
 8000d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d22:	4313      	orrs	r3, r2
 8000d24:	604b      	str	r3, [r1, #4]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d101      	bne.n	8000d8e <LL_RCC_HSI48_IsReady+0x18>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <LL_RCC_HSI48_IsReady+0x1a>
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d101      	bne.n	8000e3a <LL_RCC_LSE_IsReady+0x18>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <LL_RCC_LSE_IsReady+0x1a>
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d101      	bne.n	8000ea2 <LL_RCC_LSI1_IsReady+0x18>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <LL_RCC_LSI1_IsReady+0x1a>
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee0:	f023 0304 	bic.w	r3, r3, #4
 8000ee4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d101      	bne.n	8000f0a <LL_RCC_LSI2_IsReady+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_RCC_LSI2_IsReady+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6013      	str	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d101      	bne.n	8000f96 <LL_RCC_MSI_IsReady+0x16>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_RCC_MSI_IsReady+0x18>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fda:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2bb0      	cmp	r3, #176	; 0xb0
 8000fe0:	d901      	bls.n	8000fe6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000fe2:	23b0      	movs	r3, #176	; 0xb0
 8000fe4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000fe6:	687b      	ldr	r3, [r7, #4]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 0203 	bic.w	r2, r3, #3
 8001030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4313      	orrs	r3, r2
 8001038:	608b      	str	r3, [r1, #8]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800104a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 030c 	and.w	r3, r3, #12
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4313      	orrs	r3, r2
 8001078:	608b      	str	r3, [r1, #8]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800108e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001092:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800109a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80010ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010c2:	f023 020f 	bic.w	r2, r3, #15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ce:	4313      	orrs	r3, r2
 80010d0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	608b      	str	r3, [r1, #8]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800111a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	608b      	str	r3, [r1, #8]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800114c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001150:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001194:	6013      	str	r3, [r2, #0]
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011b2:	d101      	bne.n	80011b8 <LL_RCC_PLL_IsReady+0x18>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <LL_RCC_PLL_IsReady+0x1a>
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80011c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f003 0303 	and.w	r3, r3, #3
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800122a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d101      	bne.n	800123e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800125e:	d101      	bne.n	8001264 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001278:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d101      	bne.n	800128a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012a8:	d101      	bne.n	80012ae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012cc:	d101      	bne.n	80012d2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08d      	sub	sp, #52	; 0x34
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e386      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 808f 	beq.w	800141e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001300:	f7ff fea1 	bl	8001046 <LL_RCC_GetSysClkSource>
 8001304:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001306:	f7ff ff82 	bl	800120e <LL_RCC_PLL_GetMainSource>
 800130a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_RCC_OscConfig+0x3e>
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	2b0c      	cmp	r3, #12
 8001316:	d149      	bne.n	80013ac <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131a:	2b01      	cmp	r3, #1
 800131c:	d146      	bne.n	80013ac <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800131e:	f7ff fe2f 	bl	8000f80 <LL_RCC_MSI_IsReady>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x54>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e365      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001338:	f7ff fe47 	bl	8000fca <LL_RCC_MSI_GetRange>
 800133c:	4603      	mov	r3, r0
 800133e:	429c      	cmp	r4, r3
 8001340:	d914      	bls.n	800136c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fd1a 	bl	8001d80 <RCC_SetFlashLatencyFromMSIRange>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e354      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe21 	bl	8000fa2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fe45 	bl	8000ff4 <LL_RCC_MSI_SetCalibTrimming>
 800136a:	e013      	b.n	8001394 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe16 	bl	8000fa2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fe3a 	bl	8000ff4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fcfb 	bl	8001d80 <RCC_SetFlashLatencyFromMSIRange>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e335      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8001394:	f7ff f852 	bl	800043c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001398:	4bb4      	ldr	r3, [pc, #720]	; (800166c <HAL_RCC_OscConfig+0x38c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f90f 	bl	80005c0 <HAL_InitTick>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d039      	beq.n	800141c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e329      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d01e      	beq.n	80013f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013b4:	f7ff fdc6 	bl	8000f44 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b8:	f7ff f950 	bl	800065c <HAL_GetTick>
 80013bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c0:	f7ff f94c 	bl	800065c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e316      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 80013d2:	f7ff fdd5 	bl	8000f80 <LL_RCC_MSI_IsReady>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f1      	beq.n	80013c0 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fdde 	bl	8000fa2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fe02 	bl	8000ff4 <LL_RCC_MSI_SetCalibTrimming>
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f2:	f7ff fdb6 	bl	8000f62 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f6:	f7ff f931 	bl	800065c <HAL_GetTick>
 80013fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013fe:	f7ff f92d 	bl	800065c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e2f7      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001410:	f7ff fdb6 	bl	8000f80 <LL_RCC_MSI_IsReady>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f1      	bne.n	80013fe <HAL_RCC_OscConfig+0x11e>
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800141c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d05a      	beq.n	80014e0 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800142a:	f7ff fe0c 	bl	8001046 <LL_RCC_GetSysClkSource>
 800142e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001430:	f7ff feed 	bl	800120e <LL_RCC_PLL_GetMainSource>
 8001434:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	2b08      	cmp	r3, #8
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x168>
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d10d      	bne.n	800145e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d10a      	bne.n	800145e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	f7ff fc1c 	bl	8000c84 <LL_RCC_HSE_IsReady>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d045      	beq.n	80014de <HAL_RCC_OscConfig+0x1fe>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d141      	bne.n	80014de <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e2d0      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001466:	d102      	bne.n	800146e <HAL_RCC_OscConfig+0x18e>
 8001468:	f7ff fbee 	bl	8000c48 <LL_RCC_HSE_Enable>
 800146c:	e00d      	b.n	800148a <HAL_RCC_OscConfig+0x1aa>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001476:	d104      	bne.n	8001482 <HAL_RCC_OscConfig+0x1a2>
 8001478:	f7ff fbc8 	bl	8000c0c <LL_RCC_HSE_EnableBypass>
 800147c:	f7ff fbe4 	bl	8000c48 <LL_RCC_HSE_Enable>
 8001480:	e003      	b.n	800148a <HAL_RCC_OscConfig+0x1aa>
 8001482:	f7ff fbf0 	bl	8000c66 <LL_RCC_HSE_Disable>
 8001486:	f7ff fbd0 	bl	8000c2a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d012      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff f8e3 	bl	800065c <HAL_GetTick>
 8001496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149a:	f7ff f8df 	bl	800065c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b64      	cmp	r3, #100	; 0x64
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e2a9      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 80014ac:	f7ff fbea 	bl	8000c84 <LL_RCC_HSE_IsReady>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f1      	beq.n	800149a <HAL_RCC_OscConfig+0x1ba>
 80014b6:	e013      	b.n	80014e0 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff f8d0 	bl	800065c <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff f8cc 	bl	800065c <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e296      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 80014d2:	f7ff fbd7 	bl	8000c84 <LL_RCC_HSE_IsReady>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f1      	bne.n	80014c0 <HAL_RCC_OscConfig+0x1e0>
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d051      	beq.n	8001590 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ec:	f7ff fdab 	bl	8001046 <LL_RCC_GetSysClkSource>
 80014f0:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f2:	f7ff fe8c 	bl	800120e <LL_RCC_PLL_GetMainSource>
 80014f6:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x22a>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	d113      	bne.n	800152c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d110      	bne.n	800152c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150a:	f7ff fbeb 	bl	8000ce4 <LL_RCC_HSI_IsReady>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_OscConfig+0x240>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e26f      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbef 	bl	8000d08 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800152a:	e031      	b.n	8001590 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d019      	beq.n	8001568 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	f7ff fbb8 	bl	8000ca8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff f890 	bl	800065c <HAL_GetTick>
 800153c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff f88c 	bl	800065c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e256      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001552:	f7ff fbc7 	bl	8000ce4 <LL_RCC_HSI_IsReady>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f1      	beq.n	8001540 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fbd1 	bl	8000d08 <LL_RCC_HSI_SetCalibTrimming>
 8001566:	e013      	b.n	8001590 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001568:	f7ff fbad 	bl	8000cc6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff f876 	bl	800065c <HAL_GetTick>
 8001570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff f872 	bl	800065c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e23c      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001586:	f7ff fbad 	bl	8000ce4 <LL_RCC_HSI_IsReady>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f1      	bne.n	8001574 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a2 	beq.w	80016ee <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d075      	beq.n	800169e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d046      	beq.n	800164c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80015be:	f7ff fc64 	bl	8000e8a <LL_RCC_LSI1_IsReady>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d113      	bne.n	80015f0 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80015c8:	f7ff fc3d 	bl	8000e46 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015cc:	f7ff f846 	bl	800065c <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015d4:	f7ff f842 	bl	800065c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e20c      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80015e6:	f7ff fc50 	bl	8000e8a <LL_RCC_LSI1_IsReady>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f1      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80015f0:	f7ff fc5d 	bl	8000eae <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff f832 	bl	800065c <HAL_GetTick>
 80015f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015fc:	f7ff f82e 	bl	800065c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b03      	cmp	r3, #3
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1f8      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800160e:	f7ff fc70 	bl	8000ef2 <LL_RCC_LSI2_IsReady>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f1      	beq.n	80015fc <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fc7a 	bl	8000f16 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001622:	f7ff fc21 	bl	8000e68 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff f819 	bl	800065c <HAL_GetTick>
 800162a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800162e:	f7ff f815 	bl	800065c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1df      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001640:	f7ff fc23 	bl	8000e8a <LL_RCC_LSI1_IsReady>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f1      	bne.n	800162e <HAL_RCC_OscConfig+0x34e>
 800164a:	e050      	b.n	80016ee <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800164c:	f7ff fbfb 	bl	8000e46 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff f804 	bl	800065c <HAL_GetTick>
 8001654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001658:	f7ff f800 	bl	800065c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d904      	bls.n	8001670 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1ca      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001670:	f7ff fc0b 	bl	8000e8a <LL_RCC_LSI1_IsReady>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0ee      	beq.n	8001658 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800167a:	f7ff fc29 	bl	8000ed0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001680:	f7fe ffec 	bl	800065c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b03      	cmp	r3, #3
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1b6      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001692:	f7ff fc2e 	bl	8000ef2 <LL_RCC_LSI2_IsReady>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f1      	bne.n	8001680 <HAL_RCC_OscConfig+0x3a0>
 800169c:	e027      	b.n	80016ee <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800169e:	f7ff fc17 	bl	8000ed0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a2:	f7fe ffdb 	bl	800065c <HAL_GetTick>
 80016a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80016aa:	f7fe ffd7 	bl	800065c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1a1      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80016bc:	f7ff fc19 	bl	8000ef2 <LL_RCC_LSI2_IsReady>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f1      	bne.n	80016aa <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80016c6:	f7ff fbcf 	bl	8000e68 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7fe ffc7 	bl	800065c <HAL_GetTick>
 80016ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80016d2:	f7fe ffc3 	bl	800065c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e18d      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80016e4:	f7ff fbd1 	bl	8000e8a <LL_RCC_LSI1_IsReady>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f1      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d05b      	beq.n	80017b2 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4bb5      	ldr	r3, [pc, #724]	; (80019d0 <HAL_RCC_OscConfig+0x6f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d114      	bne.n	8001730 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001706:	f7ff fa51 	bl	8000bac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7fe ffa7 	bl	800065c <HAL_GetTick>
 800170e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7fe ffa3 	bl	800065c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e16d      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	4baa      	ldr	r3, [pc, #680]	; (80019d0 <HAL_RCC_OscConfig+0x6f0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <HAL_RCC_OscConfig+0x45e>
 8001738:	f7ff fb2f 	bl	8000d9a <LL_RCC_LSE_Enable>
 800173c:	e00c      	b.n	8001758 <HAL_RCC_OscConfig+0x478>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d104      	bne.n	8001750 <HAL_RCC_OscConfig+0x470>
 8001746:	f7ff fb4a 	bl	8000dde <LL_RCC_LSE_EnableBypass>
 800174a:	f7ff fb26 	bl	8000d9a <LL_RCC_LSE_Enable>
 800174e:	e003      	b.n	8001758 <HAL_RCC_OscConfig+0x478>
 8001750:	f7ff fb34 	bl	8000dbc <LL_RCC_LSE_Disable>
 8001754:	f7ff fb54 	bl	8000e00 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d014      	beq.n	800178a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7fe ff7c 	bl	800065c <HAL_GetTick>
 8001764:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7fe ff78 	bl	800065c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e140      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 800177e:	f7ff fb50 	bl	8000e22 <LL_RCC_LSE_IsReady>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ef      	beq.n	8001768 <HAL_RCC_OscConfig+0x488>
 8001788:	e013      	b.n	80017b2 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7fe ff67 	bl	800065c <HAL_GetTick>
 800178e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7fe ff63 	bl	800065c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e12b      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80017a8:	f7ff fb3b 	bl	8000e22 <LL_RCC_LSE_IsReady>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ef      	bne.n	8001792 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d02c      	beq.n	8001818 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d014      	beq.n	80017f0 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017c6:	f7ff fab4 	bl	8000d32 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7fe ff47 	bl	800065c <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d2:	f7fe ff43 	bl	800065c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e10d      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80017e4:	f7ff fac7 	bl	8000d76 <LL_RCC_HSI48_IsReady>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f1      	beq.n	80017d2 <HAL_RCC_OscConfig+0x4f2>
 80017ee:	e013      	b.n	8001818 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017f0:	f7ff fab0 	bl	8000d54 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7fe ff32 	bl	800065c <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017fc:	f7fe ff2e 	bl	800065c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0f8      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800180e:	f7ff fab2 	bl	8000d76 <LL_RCC_HSI48_IsReady>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f1      	bne.n	80017fc <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80ee 	beq.w	80019fe <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001822:	f7ff fc10 	bl	8001046 <LL_RCC_GetSysClkSource>
 8001826:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 80af 	bne.w	8001998 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	429a      	cmp	r2, r3
 8001846:	d123      	bne.n	8001890 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d114      	bne.n	8001890 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d10d      	bne.n	8001890 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d05d      	beq.n	800194c <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d058      	beq.n	8001948 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0ab      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018a8:	f7ff fc6b 	bl	8001182 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ac:	f7fe fed6 	bl	800065c <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7fe fed2 	bl	800065c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e09c      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ef      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_RCC_OscConfig+0x6f4>)
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ec:	0212      	lsls	r2, r2, #8
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001900:	430a      	orrs	r2, r1
 8001902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001906:	4313      	orrs	r3, r2
 8001908:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800190a:	f7ff fc2b 	bl	8001164 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800190e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800191e:	f7fe fe9d 	bl	800065c <HAL_GetTick>
 8001922:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7fe fe99 	bl	800065c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e063      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0ef      	beq.n	8001926 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001946:	e05a      	b.n	80019fe <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e059      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d151      	bne.n	80019fe <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800195a:	f7ff fc03 	bl	8001164 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800196e:	f7fe fe75 	bl	800065c <HAL_GetTick>
 8001972:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7fe fe71 	bl	800065c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e03b      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ef      	beq.n	8001976 <HAL_RCC_OscConfig+0x696>
 8001996:	e032      	b.n	80019fe <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d02d      	beq.n	80019fa <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	f7ff fbf0 	bl	8001182 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ac:	f023 0303 	bic.w	r3, r3, #3
 80019b0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019bc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80019c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7fe fe49 	bl	800065c <HAL_GetTick>
 80019ca:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	e00d      	b.n	80019ea <HAL_RCC_OscConfig+0x70a>
 80019ce:	bf00      	nop
 80019d0:	58000400 	.word	0x58000400
 80019d4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7fe fe40 	bl	800065c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ef      	bne.n	80019d8 <HAL_RCC_OscConfig+0x6f8>
 80019f8:	e001      	b.n	80019fe <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3734      	adds	r7, #52	; 0x34
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e12a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b97      	ldr	r3, [pc, #604]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d91b      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b94      	ldr	r3, [pc, #592]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4992      	ldr	r1, [pc, #584]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3a:	f7fe fe0f 	bl	800065c <HAL_GetTick>
 8001a3e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a42:	f7fe fe0b 	bl	800065c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e10e      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a54:	4b89      	ldr	r3, [pc, #548]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d1ef      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff faf3 	bl	800105e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a78:	f7fe fdf0 	bl	800065c <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a80:	f7fe fdec 	bl	800065c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0ef      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a92:	f7ff fbc8 	bl	8001226 <LL_RCC_IsActiveFlag_HPRE>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f1      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d016      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff faea 	bl	8001086 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ab2:	f7fe fdd3 	bl	800065c <HAL_GetTick>
 8001ab6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001aba:	f7fe fdcf 	bl	800065c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0d2      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001acc:	f7ff fbbd 	bl	800124a <LL_RCC_IsActiveFlag_C2HPRE>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f1      	beq.n	8001aba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d016      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fae3 	bl	80010b2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001aec:	f7fe fdb6 	bl	800065c <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001af4:	f7fe fdb2 	bl	800065c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e0b5      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b06:	f7ff fbb3 	bl	8001270 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f1      	beq.n	8001af4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d016      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fadd 	bl	80010e0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b26:	f7fe fd99 	bl	800065c <HAL_GetTick>
 8001b2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b2e:	f7fe fd95 	bl	800065c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e098      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b40:	f7ff fba9 	bl	8001296 <LL_RCC_IsActiveFlag_PPRE1>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f1      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d017      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fad3 	bl	8001108 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b62:	f7fe fd7b 	bl	800065c <HAL_GetTick>
 8001b66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b6a:	f7fe fd77 	bl	800065c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e07a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b7c:	f7ff fb9d 	bl	80012ba <LL_RCC_IsActiveFlag_PPRE2>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f1      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d043      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b9a:	f7ff f873 	bl	8000c84 <LL_RCC_HSE_IsReady>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d11e      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e064      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001bb0:	f7ff faf6 	bl	80011a0 <LL_RCC_PLL_IsReady>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d113      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e059      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001bc6:	f7ff f9db 	bl	8000f80 <LL_RCC_MSI_IsReady>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d108      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e04e      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001bd4:	f7ff f886 	bl	8000ce4 <LL_RCC_HSI_IsReady>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e047      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fa19 	bl	800101e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bec:	f7fe fd36 	bl	800065c <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7fe fd32 	bl	800065c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e033      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	f7ff fa1c 	bl	8001046 <LL_RCC_GetSysClkSource>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d1ec      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d21b      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 0207 	bic.w	r2, r3, #7
 8001c30:	4912      	ldr	r1, [pc, #72]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c38:	f7fe fd10 	bl	800065c <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c40:	f7fe fd0c 	bl	800065c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e00f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x274>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1ef      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8001c60:	f7fe fbec 	bl	800043c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001c64:	f7fe fd06 	bl	8000674 <HAL_GetTickPrio>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fca8 	bl	80005c0 <HAL_InitTick>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	58004000 	.word	0x58004000

08001c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c86:	f7ff f9de 	bl	8001046 <LL_RCC_GetSysClkSource>
 8001c8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10a      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c92:	f7ff f99a 	bl	8000fca <LL_RCC_MSI_GetRange>
 8001c96:	4603      	mov	r3, r0
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e04a      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e044      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001cba:	f7fe ff95 	bl	8000be8 <LL_RCC_HSE_IsEnabledDiv2>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e039      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e036      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001cd0:	f7ff fa9d 	bl	800120e <LL_RCC_PLL_GetMainSource>
 8001cd4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d002      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x62>
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d003      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x68>
 8001ce0:	e00d      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ce4:	60bb      	str	r3, [r7, #8]
        break;
 8001ce6:	e015      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001ce8:	f7fe ff7e 	bl	8000be8 <LL_RCC_HSE_IsEnabledDiv2>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cf4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001cf6:	e00d      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001cfa:	60bb      	str	r3, [r7, #8]
        break;
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001cfe:	f7ff f964 	bl	8000fca <LL_RCC_MSI_GetRange>
 8001d02:	4603      	mov	r3, r0
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	60bb      	str	r3, [r7, #8]
        break;
 8001d12:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001d14:	f7ff fa56 	bl	80011c4 <LL_RCC_PLL_GetN>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	fb03 f402 	mul.w	r4, r3, r2
 8001d20:	f7ff fa69 	bl	80011f6 <LL_RCC_PLL_GetDivider>
 8001d24:	4603      	mov	r3, r0
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	3301      	adds	r3, #1
 8001d2a:	fbb4 f4f3 	udiv	r4, r4, r3
 8001d2e:	f7ff fa56 	bl	80011de <LL_RCC_PLL_GetR>
 8001d32:	4603      	mov	r3, r0
 8001d34:	0f5b      	lsrs	r3, r3, #29
 8001d36:	3301      	adds	r3, #1
 8001d38:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	08001fcc 	.word	0x08001fcc
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	003d0900 	.word	0x003d0900
 8001d54:	007a1200 	.word	0x007a1200

08001d58 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d58:	b598      	push	{r3, r4, r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d5c:	f7ff ff90 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001d60:	4604      	mov	r4, r0
 8001d62:	f7ff f9e5 	bl	8001130 <LL_RCC_GetAHBPrescaler>
 8001d66:	4603      	mov	r3, r0
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <HAL_RCC_GetHCLKFreq+0x24>)
 8001d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d74:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd98      	pop	{r3, r4, r7, pc}
 8001d7c:	08001f8c 	.word	0x08001f8c

08001d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2bb0      	cmp	r3, #176	; 0xb0
 8001d8c:	d903      	bls.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e007      	b.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001da6:	f7ff f9cf 	bl	8001148 <LL_RCC_GetAHB4Prescaler>
 8001daa:	4603      	mov	r3, r0
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	0c9c      	lsrs	r4, r3, #18
 8001dca:	f7fe feff 	bl	8000bcc <HAL_PWREx_GetVoltageRange>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f000 f80c 	bl	8001df0 <RCC_SetFlashLatency>
 8001dd8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd90      	pop	{r4, r7, pc}
 8001de2:	bf00      	nop
 8001de4:	08001fcc 	.word	0x08001fcc
 8001de8:	08001f8c 	.word	0x08001f8c
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b093      	sub	sp, #76	; 0x4c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <RCC_SetFlashLatency+0xf0>)
 8001dfc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001e06:	4a37      	ldr	r2, [pc, #220]	; (8001ee4 <RCC_SetFlashLatency+0xf4>)
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001e12:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <RCC_SetFlashLatency+0xf8>)
 8001e14:	f107 040c 	add.w	r4, r7, #12
 8001e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001e1e:	2300      	movs	r3, #0
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e28:	d11c      	bne.n	8001e64 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8001e2e:	e015      	b.n	8001e5c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e38:	4413      	add	r3, r2
 8001e3a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d808      	bhi.n	8001e56 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e52:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001e54:	e022      	b.n	8001e9c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e58:	3301      	adds	r3, #1
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d9e6      	bls.n	8001e30 <RCC_SetFlashLatency+0x40>
 8001e62:	e01b      	b.n	8001e9c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e68:	e015      	b.n	8001e96 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e72:	4413      	add	r3, r2
 8001e74:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d808      	bhi.n	8001e90 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e86:	4413      	add	r3, r2
 8001e88:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001e8e:	e005      	b.n	8001e9c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e92:	3301      	adds	r3, #1
 8001e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d9e6      	bls.n	8001e6a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <RCC_SetFlashLatency+0xfc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 0207 	bic.w	r2, r3, #7
 8001ea4:	4911      	ldr	r1, [pc, #68]	; (8001eec <RCC_SetFlashLatency+0xfc>)
 8001ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001eac:	f7fe fbd6 	bl	800065c <HAL_GetTick>
 8001eb0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001eb2:	e008      	b.n	8001ec6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001eb4:	f7fe fbd2 	bl	800065c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e007      	b.n	8001ed6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <RCC_SetFlashLatency+0xfc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1ef      	bne.n	8001eb4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	374c      	adds	r7, #76	; 0x4c
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	08001f60 	.word	0x08001f60
 8001ee4:	08001f70 	.word	0x08001f70
 8001ee8:	08001f7c 	.word	0x08001f7c
 8001eec:	58004000 	.word	0x58004000

08001ef0 <__libc_init_array>:
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	4e0d      	ldr	r6, [pc, #52]	; (8001f28 <__libc_init_array+0x38>)
 8001ef4:	4c0d      	ldr	r4, [pc, #52]	; (8001f2c <__libc_init_array+0x3c>)
 8001ef6:	1ba4      	subs	r4, r4, r6
 8001ef8:	10a4      	asrs	r4, r4, #2
 8001efa:	2500      	movs	r5, #0
 8001efc:	42a5      	cmp	r5, r4
 8001efe:	d109      	bne.n	8001f14 <__libc_init_array+0x24>
 8001f00:	4e0b      	ldr	r6, [pc, #44]	; (8001f30 <__libc_init_array+0x40>)
 8001f02:	4c0c      	ldr	r4, [pc, #48]	; (8001f34 <__libc_init_array+0x44>)
 8001f04:	f000 f820 	bl	8001f48 <_init>
 8001f08:	1ba4      	subs	r4, r4, r6
 8001f0a:	10a4      	asrs	r4, r4, #2
 8001f0c:	2500      	movs	r5, #0
 8001f0e:	42a5      	cmp	r5, r4
 8001f10:	d105      	bne.n	8001f1e <__libc_init_array+0x2e>
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f18:	4798      	blx	r3
 8001f1a:	3501      	adds	r5, #1
 8001f1c:	e7ee      	b.n	8001efc <__libc_init_array+0xc>
 8001f1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f22:	4798      	blx	r3
 8001f24:	3501      	adds	r5, #1
 8001f26:	e7f2      	b.n	8001f0e <__libc_init_array+0x1e>
 8001f28:	0800200c 	.word	0x0800200c
 8001f2c:	0800200c 	.word	0x0800200c
 8001f30:	0800200c 	.word	0x0800200c
 8001f34:	08002010 	.word	0x08002010

08001f38 <memset>:
 8001f38:	4402      	add	r2, r0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <memset+0xa>
 8001f40:	4770      	bx	lr
 8001f42:	f803 1b01 	strb.w	r1, [r3], #1
 8001f46:	e7f9      	b.n	8001f3c <memset+0x4>

08001f48 <_init>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	bf00      	nop
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr

08001f54 <_fini>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	bf00      	nop
 8001f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5a:	bc08      	pop	{r3}
 8001f5c:	469e      	mov	lr, r3
 8001f5e:	4770      	bx	lr
