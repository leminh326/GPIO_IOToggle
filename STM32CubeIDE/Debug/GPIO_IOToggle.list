
GPIO_IOToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08003058  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ac  20000010  08003064  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000bc  08003064  000200bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_line   00008d02  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000abc6  00000000  00000000  00028d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018e0  00000000  00000000  00033908  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd8  00000000  00000000  000351e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d0d74  00000000  00000000  00035fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00106d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020239  00000000  00000000  00107a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00127c81  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003900  00000000  00000000  00127cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08002f1c 	.word	0x08002f1c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08002f1c 	.word	0x08002f1c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800047c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000480:	3304      	adds	r3, #4

08000482 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000482:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000484:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000486:	d3f9      	bcc.n	800047c <CopyDataInit>
  bx lr
 8000488:	4770      	bx	lr

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800048a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800048c:	3004      	adds	r0, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800048e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>
  bx lr
 8000492:	4770      	bx	lr

08000494 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000496:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000498:	f000 f99e 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800049c:	480b      	ldr	r0, [pc, #44]	; (80004cc <LoopForever+0x8>)
 800049e:	490c      	ldr	r1, [pc, #48]	; (80004d0 <LoopForever+0xc>)
 80004a0:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <LoopForever+0x10>)
 80004a2:	2300      	movs	r3, #0
 80004a4:	f7ff ffed 	bl	8000482 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004a8:	480b      	ldr	r0, [pc, #44]	; (80004d8 <LoopForever+0x14>)
 80004aa:	490c      	ldr	r1, [pc, #48]	; (80004dc <LoopForever+0x18>)
 80004ac:	2300      	movs	r3, #0
 80004ae:	f7ff ffee 	bl	800048e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004b2:	480b      	ldr	r0, [pc, #44]	; (80004e0 <LoopForever+0x1c>)
 80004b4:	490b      	ldr	r1, [pc, #44]	; (80004e4 <LoopForever+0x20>)
 80004b6:	2300      	movs	r3, #0
 80004b8:	f7ff ffe9 	bl	800048e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004bc:	f002 fd02 	bl	8002ec4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80004c0:	f000 f82c 	bl	800051c <main>

080004c4 <LoopForever>:

LoopForever:
  b LoopForever
 80004c4:	e7fe      	b.n	80004c4 <LoopForever>
 80004c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80004c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004cc:	20000004 	.word	0x20000004
 80004d0:	20000010 	.word	0x20000010
 80004d4:	08003058 	.word	0x08003058
  INIT_BSS _sbss, _ebss
 80004d8:	20000010 	.word	0x20000010
 80004dc:	200000bc 	.word	0x200000bc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004e0:	20030000 	.word	0x20030000
 80004e4:	20030000 	.word	0x20030000

080004e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC1_IRQHandler>

080004ea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4013      	ands	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b5b0      	push	{r4, r5, r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fa51 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f81d 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f8b9 	bl	80006a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800052e:	f000 f86b 	bl	8000608 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	uint8_t TxDataGP[32] = {0x55,0xAA,2,17,2,96,112,120,120,112,96,96,112,120,120,120,120,112,96,96,112,120,120,120,120,112,96,132,0,32,120,0,0,0,4,0,0,0};
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <main+0x40>)
 8000534:	463c      	mov	r4, r7
 8000536:	461d      	mov	r5, r3
 8000538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	HAL_UART_Transmit(&huart1, (uint8_t*)TxDataGP, 32,100);
 8000544:	4639      	mov	r1, r7
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	2220      	movs	r2, #32
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <main+0x44>)
 800054c:	f001 ff8e 	bl	800246c <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000554:	f000 fabe 	bl	8000ad4 <HAL_Delay>
  {
 8000558:	e7eb      	b.n	8000532 <main+0x16>
 800055a:	bf00      	nop
 800055c:	08002f34 	.word	0x08002f34
 8000560:	2000002c 	.word	0x2000002c

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b09a      	sub	sp, #104	; 0x68
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2248      	movs	r2, #72	; 0x48
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fcca 	bl	8002f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800058a:	2320      	movs	r3, #32
 800058c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000592:	2300      	movs	r3, #0
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000596:	2360      	movs	r3, #96	; 0x60
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800059e:	2301      	movs	r3, #1
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005a6:	2320      	movs	r3, #32
 80005a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80005aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f8b0 	bl	8001724 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005ca:	f000 f870 	bl	80006ae <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005ce:	236f      	movs	r3, #111	; 0x6f
 80005d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2103      	movs	r1, #3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fc2c 	bl	8001e4c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fa:	f000 f858 	bl	80006ae <Error_Handler>
  /** Initializes the peripherals clocks
  */
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005fe:	bf00      	nop
 8000600:	3768      	adds	r7, #104	; 0x68
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_USART1_UART_Init+0x90>)
 800060e:	4a23      	ldr	r2, [pc, #140]	; (800069c <MX_USART1_UART_Init+0x94>)
 8000610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_USART1_UART_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_USART1_UART_Init+0x90>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_USART1_UART_Init+0x90>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART1_UART_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000650:	4811      	ldr	r0, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000652:	f001 febb 	bl	80023cc <HAL_UART_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800065c:	f000 f827 	bl	80006ae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000664:	f002 fb49 	bl	8002cfa <HAL_UARTEx_SetTxFifoThreshold>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800066e:	f000 f81e 	bl	80006ae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4808      	ldr	r0, [pc, #32]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000676:	f002 fb7e 	bl	8002d76 <HAL_UARTEx_SetRxFifoThreshold>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000680:	f000 f815 	bl	80006ae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_USART1_UART_Init+0x90>)
 8000686:	f002 faff 	bl	8002c88 <HAL_UARTEx_DisableFifoMode>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000690:	f000 f80d 	bl	80006ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000002c 	.word	0x2000002c
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	2002      	movs	r0, #2
 80006a6:	f7ff ff20 	bl	80004ea <LL_AHB2_GRP1_EnableClock>

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}

080006ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80006b2:	e7fe      	b.n	80006b2 <Error_Handler+0x4>

080006b4 <LL_AHB2_GRP1_EnableClock>:
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000702:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4013      	ands	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <HAL_UART_MspInit+0x58>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d116      	bne.n	8000778 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800074e:	f7ff ffca 	bl	80006e6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ffae 	bl	80006b4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000768:	2307      	movs	r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <HAL_UART_MspInit+0x5c>)
 8000774:	f000 fab4 	bl	8000ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40013800 	.word	0x40013800
 8000784:	48000400 	.word	0x48000400

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f954 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80007dc:	4b26      	ldr	r3, [pc, #152]	; (8000878 <SystemInit+0xa0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <SystemInit+0xa0>)
 80007e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <SystemInit+0xa0>)
 80007ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800080a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800080c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <SystemInit+0xa4>)
 8000818:	4013      	ands	r3, r2
 800081a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800081c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000828:	f023 0305 	bic.w	r3, r3, #5
 800082c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <SystemInit+0xa8>)
 800084a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800084c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <SystemInit+0xa8>)
 8000852:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800085e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000862:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00
 800087c:	faf6fefb 	.word	0xfaf6fefb
 8000880:	22041000 	.word	0x22041000

08000884 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	4a47      	ldr	r2, [pc, #284]	; (80009b4 <SystemCoreClockUpdate+0x130>)
 8000898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800089e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f003 030c 	and.w	r3, r3, #12
 80008a8:	2b0c      	cmp	r3, #12
 80008aa:	d867      	bhi.n	800097c <SystemCoreClockUpdate+0xf8>
 80008ac:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <SystemCoreClockUpdate+0x30>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	080008e9 	.word	0x080008e9
 80008b8:	0800097d 	.word	0x0800097d
 80008bc:	0800097d 	.word	0x0800097d
 80008c0:	0800097d 	.word	0x0800097d
 80008c4:	080008f1 	.word	0x080008f1
 80008c8:	0800097d 	.word	0x0800097d
 80008cc:	0800097d 	.word	0x0800097d
 80008d0:	0800097d 	.word	0x0800097d
 80008d4:	080008f9 	.word	0x080008f9
 80008d8:	0800097d 	.word	0x0800097d
 80008dc:	0800097d 	.word	0x0800097d
 80008e0:	0800097d 	.word	0x0800097d
 80008e4:	08000901 	.word	0x08000901
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80008e8:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <SystemCoreClockUpdate+0x134>)
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	6013      	str	r3, [r2, #0]
      break;
 80008ee:	e049      	b.n	8000984 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <SystemCoreClockUpdate+0x134>)
 80008f2:	4a32      	ldr	r2, [pc, #200]	; (80009bc <SystemCoreClockUpdate+0x138>)
 80008f4:	601a      	str	r2, [r3, #0]
      break;
 80008f6:	e045      	b.n	8000984 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <SystemCoreClockUpdate+0x134>)
 80008fa:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <SystemCoreClockUpdate+0x13c>)
 80008fc:	601a      	str	r2, [r3, #0]
      break;
 80008fe:	e041      	b.n	8000984 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	f003 0303 	and.w	r3, r3, #3
 800090a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800090c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	091b      	lsrs	r3, r3, #4
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	3301      	adds	r3, #1
 800091a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d105      	bne.n	800092e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000922:	4a26      	ldr	r2, [pc, #152]	; (80009bc <SystemCoreClockUpdate+0x138>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00d      	b.n	800094a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d105      	bne.n	8000940 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <SystemCoreClockUpdate+0x13c>)
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	fbb2 f3f3 	udiv	r3, r2, r3
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	e004      	b.n	800094a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	fbb2 f3f3 	udiv	r3, r2, r3
 8000948:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800094a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800095e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0f5b      	lsrs	r3, r3, #29
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	3301      	adds	r3, #1
 800096c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <SystemCoreClockUpdate+0x134>)
 8000978:	6013      	str	r3, [r2, #0]
      break;
 800097a:	e003      	b.n	8000984 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <SystemCoreClockUpdate+0x134>)
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	6013      	str	r3, [r2, #0]
      break;
 8000982:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <SystemCoreClockUpdate+0x140>)
 8000992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000996:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <SystemCoreClockUpdate+0x134>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemCoreClockUpdate+0x134>)
 80009a4:	6013      	str	r3, [r2, #0]

}
 80009a6:	bf00      	nop
 80009a8:	371c      	adds	r7, #28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	08002ff0 	.word	0x08002ff0
 80009b8:	20000004 	.word	0x20000004
 80009bc:	00f42400 	.word	0x00f42400
 80009c0:	007a1200 	.word	0x007a1200
 80009c4:	08002f90 	.word	0x08002f90

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_Init+0x3c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x3c>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009de:	2003      	movs	r0, #3
 80009e0:	f000 f94c 	bl	8000c7c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f80f 	bl	8000a08 <HAL_InitTick>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	e001      	b.n	80009fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f6:	f7ff fe8f 	bl	8000718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	58004000 	.word	0x58004000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d024      	beq.n	8000a66 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a1c:	f001 fbbe 	bl	800219c <HAL_RCC_GetHCLKFreq>
 8000a20:	4602      	mov	r2, r0
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f946 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10f      	bne.n	8000a60 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d809      	bhi.n	8000a5a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4e:	f000 f920 	bl	8000c92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a52:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <HAL_InitTick+0x70>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	e007      	b.n	8000a6a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	e004      	b.n	8000a6a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e001      	b.n	8000a6a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000000c 	.word	0x2000000c
 8000a78:	20000008 	.word	0x20000008

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	200000b8 	.word	0x200000b8

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000b8 	.word	0x200000b8

08000abc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTickPrio+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffe2 	bl	8000aa4 <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_Delay+0x40>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffd2 	bl	8000aa4 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
    {
    }
  }
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000000c 	.word	0x2000000c

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c48:	d301      	bcc.n	8000c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00f      	b.n	8000c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <SysTick_Config+0x40>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c56:	210f      	movs	r1, #15
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f7ff ff8e 	bl	8000b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SysTick_Config+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <SysTick_Config+0x40>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff47 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff5e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff90 	bl	8000bd0 <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5f 	bl	8000b7c <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffb2 	bl	8000c38 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cee:	e14c      	b.n	8000f8a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 813e 	beq.w	8000f84 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d00b      	beq.n	8000d28 <HAL_GPIO_Init+0x48>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1c:	2b11      	cmp	r3, #17
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b12      	cmp	r3, #18
 8000d26:	d130      	bne.n	8000d8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0xea>
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b12      	cmp	r3, #18
 8000dc8:	d123      	bne.n	8000e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	691a      	ldr	r2, [r3, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	6939      	ldr	r1, [r7, #16]
 8000e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0203 	and.w	r2, r3, #3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8098 	beq.w	8000f84 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000e54:	4a54      	ldr	r2, [pc, #336]	; (8000fa8 <HAL_GPIO_Init+0x2c8>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e7e:	d019      	beq.n	8000eb4 <HAL_GPIO_Init+0x1d4>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4a      	ldr	r2, [pc, #296]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d013      	beq.n	8000eb0 <HAL_GPIO_Init+0x1d0>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a49      	ldr	r2, [pc, #292]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d00d      	beq.n	8000eac <HAL_GPIO_Init+0x1cc>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a48      	ldr	r2, [pc, #288]	; (8000fb4 <HAL_GPIO_Init+0x2d4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d007      	beq.n	8000ea8 <HAL_GPIO_Init+0x1c8>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <HAL_GPIO_Init+0x2d8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d101      	bne.n	8000ea4 <HAL_GPIO_Init+0x1c4>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e008      	b.n	8000eb6 <HAL_GPIO_Init+0x1d6>
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x1d6>
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e004      	b.n	8000eb6 <HAL_GPIO_Init+0x1d6>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x1d6>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <HAL_GPIO_Init+0x1d6>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec6:	4938      	ldr	r1, [pc, #224]	; (8000fa8 <HAL_GPIO_Init+0x2c8>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ed4:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <HAL_GPIO_Init+0x2dc>)
 8000ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000efa:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <HAL_GPIO_Init+0x2dc>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <HAL_GPIO_Init+0x2dc>)
 8000f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f28:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <HAL_GPIO_Init+0x2dc>)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_GPIO_Init+0x2dc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <HAL_GPIO_Init+0x2dc>)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_GPIO_Init+0x2dc>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_GPIO_Init+0x2dc>)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f47f aeab 	bne.w	8000cf0 <HAL_GPIO_Init+0x10>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	48000c00 	.word	0x48000c00
 8000fb8:	48001000 	.word	0x48001000
 8000fbc:	58000800 	.word	0x58000800

08000fc0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	58000400 	.word	0x58000400

08000fe0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	58000400 	.word	0x58000400

08000ffc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800100e:	d101      	bne.n	8001014 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800102e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800104c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800107e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010aa:	d101      	bne.n	80010b0 <LL_RCC_HSE_IsReady+0x18>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <LL_RCC_HSE_IsReady+0x1a>
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80010de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110a:	d101      	bne.n	8001110 <LL_RCC_HSI_IsReady+0x18>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <LL_RCC_HSI_IsReady+0x1a>
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	061b      	lsls	r3, r3, #24
 8001132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001136:	4313      	orrs	r3, r2
 8001138:	604b      	str	r3, [r1, #4]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800118e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b02      	cmp	r3, #2
 800119c:	d101      	bne.n	80011a2 <LL_RCC_HSI48_IsReady+0x18>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_RCC_HSI48_IsReady+0x1a>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800123a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b02      	cmp	r3, #2
 8001248:	d101      	bne.n	800124e <LL_RCC_LSE_IsReady+0x18>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_RCC_LSE_IsReady+0x1a>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80012a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d101      	bne.n	80012b6 <LL_RCC_LSI1_IsReady+0x18>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <LL_RCC_LSI1_IsReady+0x1a>
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80012c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b08      	cmp	r3, #8
 8001318:	d101      	bne.n	800131e <LL_RCC_LSI2_IsReady+0x18>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_RCC_LSI2_IsReady+0x1a>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001346:	4313      	orrs	r3, r2
 8001348:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6013      	str	r3, [r2, #0]
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d101      	bne.n	80013aa <LL_RCC_MSI_IsReady+0x16>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <LL_RCC_MSI_IsReady+0x18>
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80013be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80013e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2bb0      	cmp	r3, #176	; 0xb0
 80013f4:	d901      	bls.n	80013fa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80013f6:	23b0      	movs	r3, #176	; 0xb0
 80013f8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80013fa:	687b      	ldr	r3, [r7, #4]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f023 0203 	bic.w	r2, r3, #3
 8001444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4313      	orrs	r3, r2
 800144c:	608b      	str	r3, [r1, #8]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800147a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80014a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014d6:	f023 020f 	bic.w	r2, r3, #15
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e2:	4313      	orrs	r3, r2
 80014e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800152e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4313      	orrs	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015d8:	6013      	str	r3, [r2, #0]
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015f6:	d101      	bne.n	80015fc <LL_RCC_PLL_IsReady+0x18>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <LL_RCC_PLL_IsReady+0x1a>
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800163e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0303 	and.w	r3, r3, #3
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167c:	d101      	bne.n	8001682 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016a2:	d101      	bne.n	80016a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d101      	bne.n	80016ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016ec:	d101      	bne.n	80016f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001710:	d101      	bne.n	8001716 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b08d      	sub	sp, #52	; 0x34
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e386      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 808f 	beq.w	8001862 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001744:	f7ff fe89 	bl	800145a <LL_RCC_GetSysClkSource>
 8001748:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174a:	f7ff ff82 	bl	8001652 <LL_RCC_PLL_GetMainSource>
 800174e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_RCC_OscConfig+0x3e>
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	2b0c      	cmp	r3, #12
 800175a:	d149      	bne.n	80017f0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	2b01      	cmp	r3, #1
 8001760:	d146      	bne.n	80017f0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001762:	f7ff fe17 	bl	8001394 <LL_RCC_MSI_IsReady>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x54>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e365      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800177c:	f7ff fe2f 	bl	80013de <LL_RCC_MSI_GetRange>
 8001780:	4603      	mov	r3, r0
 8001782:	429c      	cmp	r4, r3
 8001784:	d914      	bls.n	80017b0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fd46 	bl	800221c <RCC_SetFlashLatencyFromMSIRange>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e354      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fe09 	bl	80013b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe2d 	bl	8001408 <LL_RCC_MSI_SetCalibTrimming>
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fdfe 	bl	80013b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe22 	bl	8001408 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fd27 	bl	800221c <RCC_SetFlashLatencyFromMSIRange>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e335      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80017d8:	f7ff f854 	bl	8000884 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017dc:	4bb4      	ldr	r3, [pc, #720]	; (8001ab0 <HAL_RCC_OscConfig+0x38c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f911 	bl	8000a08 <HAL_InitTick>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d039      	beq.n	8001860 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e329      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01e      	beq.n	8001836 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017f8:	f7ff fdae 	bl	8001358 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f952 	bl	8000aa4 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001804:	f7ff f94e 	bl	8000aa4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e316      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001816:	f7ff fdbd 	bl	8001394 <LL_RCC_MSI_IsReady>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f1      	beq.n	8001804 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fdc6 	bl	80013b6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fdea 	bl	8001408 <LL_RCC_MSI_SetCalibTrimming>
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001836:	f7ff fd9e 	bl	8001376 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800183a:	f7ff f933 	bl	8000aa4 <HAL_GetTick>
 800183e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001842:	f7ff f92f 	bl	8000aa4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e2f7      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001854:	f7ff fd9e 	bl	8001394 <LL_RCC_MSI_IsReady>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f1      	bne.n	8001842 <HAL_RCC_OscConfig+0x11e>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d05a      	beq.n	8001924 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186e:	f7ff fdf4 	bl	800145a <LL_RCC_GetSysClkSource>
 8001872:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	f7ff feed 	bl	8001652 <LL_RCC_PLL_GetMainSource>
 8001878:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x168>
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d10a      	bne.n	80018a2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	f7ff fc04 	bl	8001098 <LL_RCC_HSE_IsReady>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d045      	beq.n	8001922 <HAL_RCC_OscConfig+0x1fe>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d141      	bne.n	8001922 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e2d0      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_OscConfig+0x18e>
 80018ac:	f7ff fbd6 	bl	800105c <LL_RCC_HSE_Enable>
 80018b0:	e00d      	b.n	80018ce <HAL_RCC_OscConfig+0x1aa>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ba:	d104      	bne.n	80018c6 <HAL_RCC_OscConfig+0x1a2>
 80018bc:	f7ff fbb0 	bl	8001020 <LL_RCC_HSE_EnableBypass>
 80018c0:	f7ff fbcc 	bl	800105c <LL_RCC_HSE_Enable>
 80018c4:	e003      	b.n	80018ce <HAL_RCC_OscConfig+0x1aa>
 80018c6:	f7ff fbd8 	bl	800107a <LL_RCC_HSE_Disable>
 80018ca:	f7ff fbb8 	bl	800103e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d012      	beq.n	80018fc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff f8e5 	bl	8000aa4 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018de:	f7ff f8e1 	bl	8000aa4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b64      	cmp	r3, #100	; 0x64
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e2a9      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 80018f0:	f7ff fbd2 	bl	8001098 <LL_RCC_HSE_IsReady>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f1      	beq.n	80018de <HAL_RCC_OscConfig+0x1ba>
 80018fa:	e013      	b.n	8001924 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f8d2 	bl	8000aa4 <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f8ce 	bl	8000aa4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e296      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001916:	f7ff fbbf 	bl	8001098 <LL_RCC_HSE_IsReady>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f1      	bne.n	8001904 <HAL_RCC_OscConfig+0x1e0>
 8001920:	e000      	b.n	8001924 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d051      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001930:	f7ff fd93 	bl	800145a <LL_RCC_GetSysClkSource>
 8001934:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001936:	f7ff fe8c 	bl	8001652 <LL_RCC_PLL_GetMainSource>
 800193a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d005      	beq.n	800194e <HAL_RCC_OscConfig+0x22a>
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b0c      	cmp	r3, #12
 8001946:	d113      	bne.n	8001970 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d110      	bne.n	8001970 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194e:	f7ff fbd3 	bl	80010f8 <LL_RCC_HSI_IsReady>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_OscConfig+0x240>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e26f      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fbd7 	bl	800111c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196e:	e031      	b.n	80019d4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001978:	f7ff fba0 	bl	80010bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f892 	bl	8000aa4 <HAL_GetTick>
 8001980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff f88e 	bl	8000aa4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e256      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001996:	f7ff fbaf 	bl	80010f8 <LL_RCC_HSI_IsReady>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f1      	beq.n	8001984 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fbb9 	bl	800111c <LL_RCC_HSI_SetCalibTrimming>
 80019aa:	e013      	b.n	80019d4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ac:	f7ff fb95 	bl	80010da <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f878 	bl	8000aa4 <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff f874 	bl	8000aa4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e23c      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 80019ca:	f7ff fb95 	bl	80010f8 <LL_RCC_HSI_IsReady>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f1      	bne.n	80019b8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80a2 	beq.w	8001b32 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d075      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d046      	beq.n	8001a90 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001a02:	f7ff fc4c 	bl	800129e <LL_RCC_LSI1_IsReady>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d113      	bne.n	8001a34 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001a0c:	f7ff fc25 	bl	800125a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a10:	f7ff f848 	bl	8000aa4 <HAL_GetTick>
 8001a14:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001a18:	f7ff f844 	bl	8000aa4 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e20c      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001a2a:	f7ff fc38 	bl	800129e <LL_RCC_LSI1_IsReady>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f1      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001a34:	f7ff fc45 	bl	80012c2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f834 	bl	8000aa4 <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001a40:	f7ff f830 	bl	8000aa4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1f8      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001a52:	f7ff fc58 	bl	8001306 <LL_RCC_LSI2_IsReady>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f1      	beq.n	8001a40 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc62 	bl	800132a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001a66:	f7ff fc09 	bl	800127c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f81b 	bl	8000aa4 <HAL_GetTick>
 8001a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001a72:	f7ff f817 	bl	8000aa4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1df      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001a84:	f7ff fc0b 	bl	800129e <LL_RCC_LSI1_IsReady>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f1      	bne.n	8001a72 <HAL_RCC_OscConfig+0x34e>
 8001a8e:	e050      	b.n	8001b32 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001a90:	f7ff fbe3 	bl	800125a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f806 	bl	8000aa4 <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001a9c:	f7ff f802 	bl	8000aa4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d904      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e1ca      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001ab4:	f7ff fbf3 	bl	800129e <LL_RCC_LSI1_IsReady>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001abe:	f7ff fc11 	bl	80012e4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ac4:	f7fe ffee 	bl	8000aa4 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1b6      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001ad6:	f7ff fc16 	bl	8001306 <LL_RCC_LSI2_IsReady>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f1      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3a0>
 8001ae0:	e027      	b.n	8001b32 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001ae2:	f7ff fbff 	bl	80012e4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae6:	f7fe ffdd 	bl	8000aa4 <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001aee:	f7fe ffd9 	bl	8000aa4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e1a1      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001b00:	f7ff fc01 	bl	8001306 <LL_RCC_LSI2_IsReady>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f1      	bne.n	8001aee <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001b0a:	f7ff fbb7 	bl	800127c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7fe ffc9 	bl	8000aa4 <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b16:	f7fe ffc5 	bl	8000aa4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e18d      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001b28:	f7ff fbb9 	bl	800129e <LL_RCC_LSI1_IsReady>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f1      	bne.n	8001b16 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d05b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3e:	4bb5      	ldr	r3, [pc, #724]	; (8001e14 <HAL_RCC_OscConfig+0x6f0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d114      	bne.n	8001b74 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001b4a:	f7ff fa39 	bl	8000fc0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7fe ffa9 	bl	8000aa4 <HAL_GetTick>
 8001b52:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7fe ffa5 	bl	8000aa4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e16d      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b68:	4baa      	ldr	r3, [pc, #680]	; (8001e14 <HAL_RCC_OscConfig+0x6f0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_OscConfig+0x45e>
 8001b7c:	f7ff fb17 	bl	80011ae <LL_RCC_LSE_Enable>
 8001b80:	e00c      	b.n	8001b9c <HAL_RCC_OscConfig+0x478>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d104      	bne.n	8001b94 <HAL_RCC_OscConfig+0x470>
 8001b8a:	f7ff fb32 	bl	80011f2 <LL_RCC_LSE_EnableBypass>
 8001b8e:	f7ff fb0e 	bl	80011ae <LL_RCC_LSE_Enable>
 8001b92:	e003      	b.n	8001b9c <HAL_RCC_OscConfig+0x478>
 8001b94:	f7ff fb1c 	bl	80011d0 <LL_RCC_LSE_Disable>
 8001b98:	f7ff fb3c 	bl	8001214 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d014      	beq.n	8001bce <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7fe ff7e 	bl	8000aa4 <HAL_GetTick>
 8001ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7fe ff7a 	bl	8000aa4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e140      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bc2:	f7ff fb38 	bl	8001236 <LL_RCC_LSE_IsReady>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ef      	beq.n	8001bac <HAL_RCC_OscConfig+0x488>
 8001bcc:	e013      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7fe ff69 	bl	8000aa4 <HAL_GetTick>
 8001bd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe ff65 	bl	8000aa4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e12b      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001bec:	f7ff fb23 	bl	8001236 <LL_RCC_LSE_IsReady>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ef      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d02c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d014      	beq.n	8001c34 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c0a:	f7ff fa9c 	bl	8001146 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7fe ff49 	bl	8000aa4 <HAL_GetTick>
 8001c12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c16:	f7fe ff45 	bl	8000aa4 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e10d      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001c28:	f7ff faaf 	bl	800118a <LL_RCC_HSI48_IsReady>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f1      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4f2>
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c34:	f7ff fa98 	bl	8001168 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7fe ff34 	bl	8000aa4 <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c40:	f7fe ff30 	bl	8000aa4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0f8      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001c52:	f7ff fa9a 	bl	800118a <LL_RCC_HSI48_IsReady>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f1      	bne.n	8001c40 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80ee 	beq.w	8001e42 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c66:	f7ff fbf8 	bl	800145a <LL_RCC_GetSysClkSource>
 8001c6a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	f040 80af 	bne.w	8001ddc <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d123      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d114      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d05d      	beq.n	8001d90 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d058      	beq.n	8001d8c <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0ab      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cec:	f7ff fc6b 	bl	80015c6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cf0:	f7fe fed8 	bl	8000aa4 <HAL_GetTick>
 8001cf4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7fe fed4 	bl	8000aa4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e09c      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ef      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <HAL_RCC_OscConfig+0x6f4>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d30:	0212      	lsls	r2, r2, #8
 8001d32:	4311      	orrs	r1, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d44:	430a      	orrs	r2, r1
 8001d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d4e:	f7ff fc2b 	bl	80015a8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d62:	f7fe fe9f 	bl	8000aa4 <HAL_GetTick>
 8001d66:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7fe fe9b 	bl	8000aa4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e063      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0ef      	beq.n	8001d6a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8a:	e05a      	b.n	8001e42 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e059      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d151      	bne.n	8001e42 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d9e:	f7ff fc03 	bl	80015a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001db2:	f7fe fe77 	bl	8000aa4 <HAL_GetTick>
 8001db6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe fe73 	bl	8000aa4 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e03b      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ef      	beq.n	8001dba <HAL_RCC_OscConfig+0x696>
 8001dda:	e032      	b.n	8001e42 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d02d      	beq.n	8001e3e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	f7ff fbf0 	bl	80015c6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df0:	f023 0303 	bic.w	r3, r3, #3
 8001df4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e00:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fe4b 	bl	8000aa4 <HAL_GetTick>
 8001e0e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	e00d      	b.n	8001e2e <HAL_RCC_OscConfig+0x70a>
 8001e12:	bf00      	nop
 8001e14:	58000400 	.word	0x58000400
 8001e18:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe fe42 	bl	8000aa4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ef      	bne.n	8001e1c <HAL_RCC_OscConfig+0x6f8>
 8001e3c:	e001      	b.n	8001e42 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3734      	adds	r7, #52	; 0x34
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}

08001e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e12a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b97      	ldr	r3, [pc, #604]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d91b      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b94      	ldr	r3, [pc, #592]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4992      	ldr	r1, [pc, #584]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e7e:	f7fe fe11 	bl	8000aa4 <HAL_GetTick>
 8001e82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e86:	f7fe fe0d 	bl	8000aa4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e10e      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e98:	4b89      	ldr	r3, [pc, #548]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d1ef      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fadb 	bl	8001472 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fdf2 	bl	8000aa4 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ec4:	f7fe fdee 	bl	8000aa4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0ef      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ed6:	f7ff fbc8 	bl	800166a <LL_RCC_IsActiveFlag_HPRE>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f1      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d016      	beq.n	8001f1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fad2 	bl	800149a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ef6:	f7fe fdd5 	bl	8000aa4 <HAL_GetTick>
 8001efa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001efe:	f7fe fdd1 	bl	8000aa4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0d2      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f10:	f7ff fbbd 	bl	800168e <LL_RCC_IsActiveFlag_C2HPRE>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f1      	beq.n	8001efe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d016      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff facb 	bl	80014c6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f30:	f7fe fdb8 	bl	8000aa4 <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f38:	f7fe fdb4 	bl	8000aa4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0b5      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f4a:	f7ff fbb3 	bl	80016b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f1      	beq.n	8001f38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fac5 	bl	80014f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f6a:	f7fe fd9b 	bl	8000aa4 <HAL_GetTick>
 8001f6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f72:	f7fe fd97 	bl	8000aa4 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e098      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f84:	f7ff fba9 	bl	80016da <LL_RCC_IsActiveFlag_PPRE1>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f1      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d017      	beq.n	8001fca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fabb 	bl	800151c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fa6:	f7fe fd7d 	bl	8000aa4 <HAL_GetTick>
 8001faa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fae:	f7fe fd79 	bl	8000aa4 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e07a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fc0:	f7ff fb9d 	bl	80016fe <LL_RCC_IsActiveFlag_PPRE2>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f1      	beq.n	8001fae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d043      	beq.n	800205e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001fde:	f7ff f85b 	bl	8001098 <LL_RCC_HSE_IsReady>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11e      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e064      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001ff4:	f7ff faf6 	bl	80015e4 <LL_RCC_PLL_IsReady>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d113      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e059      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800200a:	f7ff f9c3 	bl	8001394 <LL_RCC_MSI_IsReady>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d108      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e04e      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002018:	f7ff f86e 	bl	80010f8 <LL_RCC_HSI_IsReady>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e047      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fa01 	bl	8001432 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002030:	f7fe fd38 	bl	8000aa4 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	e00a      	b.n	800204e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7fe fd34 	bl	8000aa4 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e033      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	f7ff fa04 	bl	800145a <LL_RCC_GetSysClkSource>
 8002052:	4602      	mov	r2, r0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	429a      	cmp	r2, r3
 800205c:	d1ec      	bne.n	8002038 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d21b      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 0207 	bic.w	r2, r3, #7
 8002074:	4912      	ldr	r1, [pc, #72]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207c:	f7fe fd12 	bl	8000aa4 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	e008      	b.n	8002096 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002084:	f7fe fd0e 	bl	8000aa4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e00f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1ef      	bne.n	8002084 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80020a4:	f7fe fbee 	bl	8000884 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80020a8:	f7fe fd08 	bl	8000abc <HAL_GetTickPrio>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fcaa 	bl	8000a08 <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	58004000 	.word	0x58004000

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	f7ff f9c6 	bl	800145a <LL_RCC_GetSysClkSource>
 80020ce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80020d6:	f7ff f982 	bl	80013de <LL_RCC_MSI_GetRange>
 80020da:	4603      	mov	r3, r0
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	4a2a      	ldr	r2, [pc, #168]	; (800218c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e04a      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f2:	4b27      	ldr	r3, [pc, #156]	; (8002190 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e044      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d10a      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020fe:	f7fe ff7d 	bl	8000ffc <LL_RCC_HSE_IsEnabledDiv2>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd0>)
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e039      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e036      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002114:	f7ff fa9d 	bl	8001652 <LL_RCC_PLL_GetMainSource>
 8002118:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d002      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x62>
 8002120:	2b03      	cmp	r3, #3
 8002122:	d003      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x68>
 8002124:	e00d      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002128:	60bb      	str	r3, [r7, #8]
        break;
 800212a:	e015      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800212c:	f7fe ff66 	bl	8000ffc <LL_RCC_HSE_IsEnabledDiv2>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002138:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800213a:	e00d      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_RCC_GetSysClockFreq+0xd4>)
 800213e:	60bb      	str	r3, [r7, #8]
        break;
 8002140:	e00a      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002142:	f7ff f94c 	bl	80013de <LL_RCC_MSI_GetRange>
 8002146:	4603      	mov	r3, r0
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	60bb      	str	r3, [r7, #8]
        break;
 8002156:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002158:	f7ff fa56 	bl	8001608 <LL_RCC_PLL_GetN>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	fb03 f402 	mul.w	r4, r3, r2
 8002164:	f7ff fa69 	bl	800163a <LL_RCC_PLL_GetDivider>
 8002168:	4603      	mov	r3, r0
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	3301      	adds	r3, #1
 800216e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002172:	f7ff fa56 	bl	8001622 <LL_RCC_PLL_GetR>
 8002176:	4603      	mov	r3, r0
 8002178:	0f5b      	lsrs	r3, r3, #29
 800217a:	3301      	adds	r3, #1
 800217c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002180:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	08002ff0 	.word	0x08002ff0
 8002190:	00f42400 	.word	0x00f42400
 8002194:	003d0900 	.word	0x003d0900
 8002198:	007a1200 	.word	0x007a1200

0800219c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b598      	push	{r3, r4, r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80021a0:	f7ff ff90 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 80021a4:	4604      	mov	r4, r0
 80021a6:	f7ff f9cd 	bl	8001544 <LL_RCC_GetAHBPrescaler>
 80021aa:	4603      	mov	r3, r0
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd98      	pop	{r3, r4, r7, pc}
 80021c0:	08002f90 	.word	0x08002f90

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b598      	push	{r3, r4, r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021c8:	f7ff ffe8 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021cc:	4604      	mov	r4, r0
 80021ce:	f7ff f9d3 	bl	8001578 <LL_RCC_GetAPB1Prescaler>
 80021d2:	4603      	mov	r3, r0
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80021dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd98      	pop	{r3, r4, r7, pc}
 80021ec:	08002fd0 	.word	0x08002fd0

080021f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f0:	b598      	push	{r3, r4, r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80021f4:	f7ff ffd2 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021f8:	4604      	mov	r4, r0
 80021fa:	f7ff f9c9 	bl	8001590 <LL_RCC_GetAPB2Prescaler>
 80021fe:	4603      	mov	r3, r0
 8002200:	0adb      	lsrs	r3, r3, #11
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd98      	pop	{r3, r4, r7, pc}
 8002218:	08002fd0 	.word	0x08002fd0

0800221c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2bb0      	cmp	r3, #176	; 0xb0
 8002228:	d903      	bls.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e007      	b.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002242:	f7ff f98b 	bl	800155c <LL_RCC_GetAHB4Prescaler>
 8002246:	4603      	mov	r3, r0
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	0c9c      	lsrs	r4, r3, #18
 8002266:	f7fe febb 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 800226a:	4603      	mov	r3, r0
 800226c:	4619      	mov	r1, r3
 800226e:	4620      	mov	r0, r4
 8002270:	f000 f80c 	bl	800228c <RCC_SetFlashLatency>
 8002274:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop
 8002280:	08002ff0 	.word	0x08002ff0
 8002284:	08002f90 	.word	0x08002f90
 8002288:	431bde83 	.word	0x431bde83

0800228c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b093      	sub	sp, #76	; 0x4c
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <RCC_SetFlashLatency+0xf0>)
 8002298:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800229c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80022a2:	4a37      	ldr	r2, [pc, #220]	; (8002380 <RCC_SetFlashLatency+0xf4>)
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80022ae:	4b35      	ldr	r3, [pc, #212]	; (8002384 <RCC_SetFlashLatency+0xf8>)
 80022b0:	f107 040c 	add.w	r4, r7, #12
 80022b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80022ba:	2300      	movs	r3, #0
 80022bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c4:	d11c      	bne.n	8002300 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	643b      	str	r3, [r7, #64]	; 0x40
 80022ca:	e015      	b.n	80022f8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80022cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022d4:	4413      	add	r3, r2
 80022d6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d808      	bhi.n	80022f2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80022e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022e8:	4413      	add	r3, r2
 80022ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80022ee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80022f0:	e022      	b.n	8002338 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80022f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f4:	3301      	adds	r3, #1
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
 80022f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d9e6      	bls.n	80022cc <RCC_SetFlashLatency+0x40>
 80022fe:	e01b      	b.n	8002338 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002300:	2300      	movs	r3, #0
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002304:	e015      	b.n	8002332 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800230e:	4413      	add	r3, r2
 8002310:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d808      	bhi.n	800232c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800231a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002322:	4413      	add	r3, r2
 8002324:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800232a:	e005      	b.n	8002338 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800232c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232e:	3301      	adds	r3, #1
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002334:	2b02      	cmp	r3, #2
 8002336:	d9e6      	bls.n	8002306 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <RCC_SetFlashLatency+0xfc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 0207 	bic.w	r2, r3, #7
 8002340:	4911      	ldr	r1, [pc, #68]	; (8002388 <RCC_SetFlashLatency+0xfc>)
 8002342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002348:	f7fe fbac 	bl	8000aa4 <HAL_GetTick>
 800234c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800234e:	e008      	b.n	8002362 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002350:	f7fe fba8 	bl	8000aa4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e007      	b.n	8002372 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <RCC_SetFlashLatency+0xfc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800236c:	429a      	cmp	r2, r3
 800236e:	d1ef      	bne.n	8002350 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	374c      	adds	r7, #76	; 0x4c
 8002376:	46bd      	mov	sp, r7
 8002378:	bd90      	pop	{r4, r7, pc}
 800237a:	bf00      	nop
 800237c:	08002f54 	.word	0x08002f54
 8002380:	08002f64 	.word	0x08002f64
 8002384:	08002f70 	.word	0x08002f70
 8002388:	58004000 	.word	0x58004000

0800238c <LL_RCC_GetUSARTClockSource>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4013      	ands	r3, r2
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_RCC_GetLPUARTClockSource>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4013      	ands	r3, r2
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e042      	b.n	8002464 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7fe f999 	bl	8000728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2224      	movs	r2, #36	; 0x24
 80023fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8c2 	bl	8002598 <UART_SetConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e022      	b.n	8002464 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fac4 	bl	80029b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800243a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800244a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fb4b 	bl	8002af8 <UART_CheckIdleState>
 8002462:	4603      	mov	r3, r0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002482:	2b20      	cmp	r3, #32
 8002484:	f040 8083 	bne.w	800258e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_UART_Transmit+0x28>
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e07b      	b.n	8002590 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Transmit+0x3a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e074      	b.n	8002590 <HAL_UART_Transmit+0x124>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2221      	movs	r2, #33	; 0x21
 80024ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80024be:	f7fe faf1 	bl	8000aa4 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024dc:	d108      	bne.n	80024f0 <HAL_UART_Transmit+0x84>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d104      	bne.n	80024f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	e003      	b.n	80024f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8002500:	e02c      	b.n	800255c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fb3b 	bl	8002b88 <UART_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e039      	b.n	8002590 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	3302      	adds	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	e007      	b.n	800254a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1cc      	bne.n	8002502 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fb08 	bl	8002b88 <UART_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e006      	b.n	8002590 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800258e:	2302      	movs	r3, #2
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002598:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800259c:	b088      	sub	sp, #32
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4ba4      	ldr	r3, [pc, #656]	; (8002860 <UART_SetConfig+0x2c8>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	69f9      	ldr	r1, [r7, #28]
 80025d8:	430b      	orrs	r3, r1
 80025da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a99      	ldr	r2, [pc, #612]	; (8002864 <UART_SetConfig+0x2cc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	4313      	orrs	r3, r2
 800260a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002616:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	69f9      	ldr	r1, [r7, #28]
 8002620:	430b      	orrs	r3, r1
 8002622:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	f023 010f 	bic.w	r1, r3, #15
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a8a      	ldr	r2, [pc, #552]	; (8002868 <UART_SetConfig+0x2d0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d121      	bne.n	8002688 <UART_SetConfig+0xf0>
 8002644:	2003      	movs	r0, #3
 8002646:	f7ff fea1 	bl	800238c <LL_RCC_GetUSARTClockSource>
 800264a:	4603      	mov	r3, r0
 800264c:	2b03      	cmp	r3, #3
 800264e:	d817      	bhi.n	8002680 <UART_SetConfig+0xe8>
 8002650:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <UART_SetConfig+0xc0>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	08002669 	.word	0x08002669
 800265c:	08002675 	.word	0x08002675
 8002660:	0800266f 	.word	0x0800266f
 8002664:	0800267b 	.word	0x0800267b
 8002668:	2301      	movs	r3, #1
 800266a:	76fb      	strb	r3, [r7, #27]
 800266c:	e038      	b.n	80026e0 <UART_SetConfig+0x148>
 800266e:	2302      	movs	r3, #2
 8002670:	76fb      	strb	r3, [r7, #27]
 8002672:	e035      	b.n	80026e0 <UART_SetConfig+0x148>
 8002674:	2304      	movs	r3, #4
 8002676:	76fb      	strb	r3, [r7, #27]
 8002678:	e032      	b.n	80026e0 <UART_SetConfig+0x148>
 800267a:	2308      	movs	r3, #8
 800267c:	76fb      	strb	r3, [r7, #27]
 800267e:	e02f      	b.n	80026e0 <UART_SetConfig+0x148>
 8002680:	2310      	movs	r3, #16
 8002682:	76fb      	strb	r3, [r7, #27]
 8002684:	bf00      	nop
 8002686:	e02b      	b.n	80026e0 <UART_SetConfig+0x148>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a75      	ldr	r2, [pc, #468]	; (8002864 <UART_SetConfig+0x2cc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d124      	bne.n	80026dc <UART_SetConfig+0x144>
 8002692:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002696:	f7ff fe89 	bl	80023ac <LL_RCC_GetLPUARTClockSource>
 800269a:	4603      	mov	r3, r0
 800269c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a0:	d012      	beq.n	80026c8 <UART_SetConfig+0x130>
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a6:	d802      	bhi.n	80026ae <UART_SetConfig+0x116>
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <UART_SetConfig+0x124>
 80026ac:	e012      	b.n	80026d4 <UART_SetConfig+0x13c>
 80026ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b2:	d006      	beq.n	80026c2 <UART_SetConfig+0x12a>
 80026b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026b8:	d009      	beq.n	80026ce <UART_SetConfig+0x136>
 80026ba:	e00b      	b.n	80026d4 <UART_SetConfig+0x13c>
 80026bc:	2300      	movs	r3, #0
 80026be:	76fb      	strb	r3, [r7, #27]
 80026c0:	e00e      	b.n	80026e0 <UART_SetConfig+0x148>
 80026c2:	2302      	movs	r3, #2
 80026c4:	76fb      	strb	r3, [r7, #27]
 80026c6:	e00b      	b.n	80026e0 <UART_SetConfig+0x148>
 80026c8:	2304      	movs	r3, #4
 80026ca:	76fb      	strb	r3, [r7, #27]
 80026cc:	e008      	b.n	80026e0 <UART_SetConfig+0x148>
 80026ce:	2308      	movs	r3, #8
 80026d0:	76fb      	strb	r3, [r7, #27]
 80026d2:	e005      	b.n	80026e0 <UART_SetConfig+0x148>
 80026d4:	2310      	movs	r3, #16
 80026d6:	76fb      	strb	r3, [r7, #27]
 80026d8:	bf00      	nop
 80026da:	e001      	b.n	80026e0 <UART_SetConfig+0x148>
 80026dc:	2310      	movs	r3, #16
 80026de:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5f      	ldr	r2, [pc, #380]	; (8002864 <UART_SetConfig+0x2cc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	f040 808e 	bne.w	8002808 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026ec:	7efb      	ldrb	r3, [r7, #27]
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d823      	bhi.n	800273a <UART_SetConfig+0x1a2>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <UART_SetConfig+0x160>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	0800271d 	.word	0x0800271d
 80026fc:	0800273b 	.word	0x0800273b
 8002700:	08002725 	.word	0x08002725
 8002704:	0800273b 	.word	0x0800273b
 8002708:	0800272b 	.word	0x0800272b
 800270c:	0800273b 	.word	0x0800273b
 8002710:	0800273b 	.word	0x0800273b
 8002714:	0800273b 	.word	0x0800273b
 8002718:	08002733 	.word	0x08002733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800271c:	f7ff fd52 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 8002720:	6178      	str	r0, [r7, #20]
        break;
 8002722:	e00f      	b.n	8002744 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002724:	4b51      	ldr	r3, [pc, #324]	; (800286c <UART_SetConfig+0x2d4>)
 8002726:	617b      	str	r3, [r7, #20]
        break;
 8002728:	e00c      	b.n	8002744 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800272a:	f7ff fccb 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 800272e:	6178      	str	r0, [r7, #20]
        break;
 8002730:	e008      	b.n	8002744 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002736:	617b      	str	r3, [r7, #20]
        break;
 8002738:	e004      	b.n	8002744 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	76bb      	strb	r3, [r7, #26]
        break;
 8002742:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 811c 	beq.w	8002984 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	4a47      	ldr	r2, [pc, #284]	; (8002870 <UART_SetConfig+0x2d8>)
 8002752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002756:	461a      	mov	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fbb3 f3f2 	udiv	r3, r3, r2
 800275e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d305      	bcc.n	800277c <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d902      	bls.n	8002782 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	76bb      	strb	r3, [r7, #26]
 8002780:	e100      	b.n	8002984 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	4618      	mov	r0, r3
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	4a38      	ldr	r2, [pc, #224]	; (8002870 <UART_SetConfig+0x2d8>)
 8002790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002794:	b29b      	uxth	r3, r3
 8002796:	f04f 0400 	mov.w	r4, #0
 800279a:	461a      	mov	r2, r3
 800279c:	4623      	mov	r3, r4
 800279e:	f7fd fced 	bl	800017c <__aeabi_uldivmod>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	4619      	mov	r1, r3
 80027a8:	4622      	mov	r2, r4
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	f04f 0400 	mov.w	r4, #0
 80027b2:	0214      	lsls	r4, r2, #8
 80027b4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80027b8:	020b      	lsls	r3, r1, #8
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6852      	ldr	r2, [r2, #4]
 80027be:	0852      	lsrs	r2, r2, #1
 80027c0:	4611      	mov	r1, r2
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	eb13 0b01 	adds.w	fp, r3, r1
 80027ca:	eb44 0c02 	adc.w	ip, r4, r2
 80027ce:	4658      	mov	r0, fp
 80027d0:	4661      	mov	r1, ip
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f04f 0400 	mov.w	r4, #0
 80027da:	461a      	mov	r2, r3
 80027dc:	4623      	mov	r3, r4
 80027de:	f7fd fccd 	bl	800017c <__aeabi_uldivmod>
 80027e2:	4603      	mov	r3, r0
 80027e4:	460c      	mov	r4, r1
 80027e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ee:	d308      	bcc.n	8002802 <UART_SetConfig+0x26a>
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f6:	d204      	bcs.n	8002802 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	e0c0      	b.n	8002984 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	76bb      	strb	r3, [r7, #26]
 8002806:	e0bd      	b.n	8002984 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002810:	d169      	bne.n	80028e6 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8002812:	7efb      	ldrb	r3, [r7, #27]
 8002814:	3b01      	subs	r3, #1
 8002816:	2b07      	cmp	r3, #7
 8002818:	d82c      	bhi.n	8002874 <UART_SetConfig+0x2dc>
 800281a:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <UART_SetConfig+0x288>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	08002841 	.word	0x08002841
 8002824:	08002849 	.word	0x08002849
 8002828:	08002875 	.word	0x08002875
 800282c:	0800284f 	.word	0x0800284f
 8002830:	08002875 	.word	0x08002875
 8002834:	08002875 	.word	0x08002875
 8002838:	08002875 	.word	0x08002875
 800283c:	08002857 	.word	0x08002857
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002840:	f7ff fcd6 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8002844:	6178      	str	r0, [r7, #20]
        break;
 8002846:	e01a      	b.n	800287e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <UART_SetConfig+0x2d4>)
 800284a:	617b      	str	r3, [r7, #20]
        break;
 800284c:	e017      	b.n	800287e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800284e:	f7ff fc39 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002852:	6178      	str	r0, [r7, #20]
        break;
 8002854:	e013      	b.n	800287e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285a:	617b      	str	r3, [r7, #20]
        break;
 800285c:	e00f      	b.n	800287e <UART_SetConfig+0x2e6>
 800285e:	bf00      	nop
 8002860:	cfff69f3 	.word	0xcfff69f3
 8002864:	40008000 	.word	0x40008000
 8002868:	40013800 	.word	0x40013800
 800286c:	00f42400 	.word	0x00f42400
 8002870:	08003030 	.word	0x08003030
      default:
        pclk = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	76bb      	strb	r3, [r7, #26]
        break;
 800287c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d07f      	beq.n	8002984 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	4a48      	ldr	r2, [pc, #288]	; (80029ac <UART_SetConfig+0x414>)
 800288a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800288e:	461a      	mov	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fbb3 f3f2 	udiv	r3, r3, r2
 8002896:	005a      	lsls	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	441a      	add	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	d916      	bls.n	80028e0 <UART_SetConfig+0x348>
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d212      	bcs.n	80028e0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f023 030f 	bic.w	r3, r3, #15
 80028c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	89fb      	ldrh	r3, [r7, #14]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	89fa      	ldrh	r2, [r7, #14]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	e051      	b.n	8002984 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	76bb      	strb	r3, [r7, #26]
 80028e4:	e04e      	b.n	8002984 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028e6:	7efb      	ldrb	r3, [r7, #27]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	2b07      	cmp	r3, #7
 80028ec:	d821      	bhi.n	8002932 <UART_SetConfig+0x39a>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <UART_SetConfig+0x35c>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002915 	.word	0x08002915
 80028f8:	0800291d 	.word	0x0800291d
 80028fc:	08002933 	.word	0x08002933
 8002900:	08002923 	.word	0x08002923
 8002904:	08002933 	.word	0x08002933
 8002908:	08002933 	.word	0x08002933
 800290c:	08002933 	.word	0x08002933
 8002910:	0800292b 	.word	0x0800292b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002914:	f7ff fc6c 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8002918:	6178      	str	r0, [r7, #20]
        break;
 800291a:	e00f      	b.n	800293c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <UART_SetConfig+0x418>)
 800291e:	617b      	str	r3, [r7, #20]
        break;
 8002920:	e00c      	b.n	800293c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002922:	f7ff fbcf 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002926:	6178      	str	r0, [r7, #20]
        break;
 8002928:	e008      	b.n	800293c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800292a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800292e:	617b      	str	r3, [r7, #20]
        break;
 8002930:	e004      	b.n	800293c <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	76bb      	strb	r3, [r7, #26]
        break;
 800293a:	bf00      	nop
    }

    if (pclk != 0U)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d020      	beq.n	8002984 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	4a19      	ldr	r2, [pc, #100]	; (80029ac <UART_SetConfig+0x414>)
 8002948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800294c:	461a      	mov	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	fbb3 f2f2 	udiv	r2, r3, r2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	441a      	add	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	b29b      	uxth	r3, r3
 8002966:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	d908      	bls.n	8002980 <UART_SetConfig+0x3e8>
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d204      	bcs.n	8002980 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	e001      	b.n	8002984 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80029a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80029ac:	08003030 	.word	0x08003030
 80029b0:	00f42400 	.word	0x00f42400

080029b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01a      	beq.n	8002aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ab2:	d10a      	bne.n	8002aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
  }
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b08:	f7fd ffcc 	bl	8000aa4 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d10e      	bne.n	8002b3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f82c 	bl	8002b88 <UART_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e022      	b.n	8002b80 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d10e      	bne.n	8002b66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f816 	bl	8002b88 <UART_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e00c      	b.n	8002b80 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b98:	e062      	b.n	8002c60 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d05e      	beq.n	8002c60 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7fd ff7f 	bl	8000aa4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11d      	bne.n	8002bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bc6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e045      	b.n	8002c80 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02e      	beq.n	8002c60 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c10:	d126      	bne.n	8002c60 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c1a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e00f      	b.n	8002c80 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d08d      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_UARTEx_DisableFifoMode+0x16>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e027      	b.n	8002cee <HAL_UARTEx_DisableFifoMode+0x66>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2224      	movs	r2, #36	; 0x24
 8002caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002ccc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e02d      	b.n	8002d6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2224      	movs	r2, #36	; 0x24
 8002d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f850 	bl	8002df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e02d      	b.n	8002dea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2224      	movs	r2, #36	; 0x24
 8002d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f812 	bl	8002df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <UARTEx_SetNbDataToProcess+0xc8>)
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e06:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002e0a:	4a2d      	ldr	r2, [pc, #180]	; (8002ec0 <UARTEx_SetNbDataToProcess+0xcc>)
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e14:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d108      	bne.n	8002e32 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e30:	e03d      	b.n	8002eae <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e32:	2308      	movs	r3, #8
 8002e34:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e36:	2308      	movs	r3, #8
 8002e38:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	0e5b      	lsrs	r3, r3, #25
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	0f5b      	lsrs	r3, r3, #29
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002e5a:	7fbb      	ldrb	r3, [r7, #30]
 8002e5c:	7f3a      	ldrb	r2, [r7, #28]
 8002e5e:	f107 0120 	add.w	r1, r7, #32
 8002e62:	440a      	add	r2, r1
 8002e64:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	7f3a      	ldrb	r2, [r7, #28]
 8002e6e:	f107 0120 	add.w	r1, r7, #32
 8002e72:	440a      	add	r2, r1
 8002e74:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8002e78:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
 8002e86:	7f7a      	ldrb	r2, [r7, #29]
 8002e88:	f107 0120 	add.w	r1, r7, #32
 8002e8c:	440a      	add	r2, r1
 8002e8e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	7f7a      	ldrb	r2, [r7, #29]
 8002e98:	f107 0120 	add.w	r1, r7, #32
 8002e9c:	440a      	add	r2, r1
 8002e9e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8002ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002eae:	bf00      	nop
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	08002f80 	.word	0x08002f80
 8002ec0:	08002f88 	.word	0x08002f88

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4e0d      	ldr	r6, [pc, #52]	; (8002efc <__libc_init_array+0x38>)
 8002ec8:	4c0d      	ldr	r4, [pc, #52]	; (8002f00 <__libc_init_array+0x3c>)
 8002eca:	1ba4      	subs	r4, r4, r6
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	2500      	movs	r5, #0
 8002ed0:	42a5      	cmp	r5, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	4e0b      	ldr	r6, [pc, #44]	; (8002f04 <__libc_init_array+0x40>)
 8002ed6:	4c0c      	ldr	r4, [pc, #48]	; (8002f08 <__libc_init_array+0x44>)
 8002ed8:	f000 f820 	bl	8002f1c <_init>
 8002edc:	1ba4      	subs	r4, r4, r6
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	2500      	movs	r5, #0
 8002ee2:	42a5      	cmp	r5, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eec:	4798      	blx	r3
 8002eee:	3501      	adds	r5, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef6:	4798      	blx	r3
 8002ef8:	3501      	adds	r5, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08003050 	.word	0x08003050
 8002f00:	08003050 	.word	0x08003050
 8002f04:	08003050 	.word	0x08003050
 8002f08:	08003054 	.word	0x08003054

08002f0c <memset>:
 8002f0c:	4402      	add	r2, r0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
